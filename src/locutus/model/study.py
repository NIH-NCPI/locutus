from . import Serializable
from marshmallow import Schema, fields, post_load

from locutus.model.datadictionary import DataDictionary
from locutus.model.reference import Reference


"""
A Study represents a research study which will likely contain one or more
datasets which conform to a single data-dictionary. 

The study objects will live within their own collection and will, therefore, 
have their own id. 

Id:
This should be generated by the system, but can be provided by the user. 

Name (required):
A Human friendly name associated with the study. 

Title (required):
The study's formal title

URL (required):
The study's "system" identifier. 

Description:
An optional block of text that is used to provide context for understanding the
study's purpose.

Identifier-Prefix:
This is used when generating FHIR systems for identifiers. 

Data-Dictionary:
This will be references to the data-dictionaries associated with the study

"""


class Study(Serializable):
    _id_prefix = "st"

    def __init__(
        self,
        id=None,
        _id=None,
        name=None,
        description=None,
        identifier_prefix="",
        title=None,
        url="",
        datadictionary=None,
        resource_type=None,
    ):
        super().__init__(id=id, _id=_id, collection_type="Study", resource_type="Study")
        self.name = name
        self.description = description
        self.identifier_prefix = identifier_prefix
        self.title = title
        self.url = url

        self.datadictionary = []
        if datadictionary is not None:
            self.datadictionary = [Reference(dd["reference"]) for dd in datadictionary]

        super().identify()

    def remove_dd(self, id):
        matching_references = []

        treference = f"DataDictionary/{id}"

        idx = 0
        for ref in self.datadictionary:
            if ref.reference == treference:
                matching_references.append(idx)
            idx += 1

        if len(matching_references) > 0:
            for ref in matching_references:
                del self.datadictionary[ref]

        return len(matching_references)

    def keys(self):
        return [self.title, self.url, self.name]

    class _Schema(Schema):
        id = fields.Str()
        name = fields.Str(required=True)
        description = fields.Str()
        identifier_prefix = fields.URL()
        title = fields.Str(required=True)
        url = fields.URL()
        resource_type = fields.Str()

        # For now, we'll just cache the reference ID
        datadictionary = fields.List(fields.Nested(Reference._Schema))

        @post_load
        def build_terminology(self, data, **kwargs):
            return Study(**data)
