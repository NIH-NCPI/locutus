# This workflow build and push a Docker container to Google Artifact Registry
# and deploy it on Cloud Run when a PR to the `release` branch is made.
# Will create a version env variable using the PR title. PR naming convention ex:
# 'Release v0.0.0'

name: 'QA Deploy'

on:
  pull_request:
    branches:
      - release
    types: [opened, edited, synchronize] # PR opened, edited(PR title, etc), new commits are pushed.

env:

  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGION: ${{ secrets.REGION_LOC_1 }}
  SERVICE: 'locutus'
  IMAGE_NAME: 'locutus_img'
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

jobs:
  
  deploy:
    runs-on: 'ubuntu-latest'
    
    environment:
      name: qa

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ env.GCP_CREDENTIALS }}

      - name: 'Docker Auth'
        run: |
          gcloud auth configure-docker '${{ env.REGION }}-docker.pkg.dev'

      - name: Configure Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Extract Version from PR Title # Assumes PR title contains the tag. ex v0.0.0 or v0.0.0abc
        run: |
          VERSION=$(echo "${{ github.event.pull_request.title }}" | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+[a-zA-Z]*') 
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Extracted Version: ${VERSION}"

      - name: 'Build and Push Container'
        run: |
          DOCKER_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker build --tag "${DOCKER_TAG}" .
          docker push "${DOCKER_TAG}"

      - name: 'Deploy to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          env_vars: VERSION=${{ env.VERSION }}